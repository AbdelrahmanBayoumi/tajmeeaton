#!/usr/bin/env python

import re
import os
import time
from tqdm import tqdm
from dotenv import dotenv_values
from notion.client import NotionClient

# fmt: off
__dirname__        = os.path.dirname(__file__)
env                = dotenv_values(os.path.join(__dirname__, ".بيئة"))
README_FILE        = os.path.join(__dirname__, "README.md")
CACHE_DIR          = os.path.join(__dirname__, ".cache")
NOTION_API_VERSION = "2021-05-13"
NOTION_API_URL     = "https://api.notion.com/v1"
NOTION_PAGE_ID     = "3f677c2054ee49efad36e321cd88e1ac"
notion_client      = None
page_block         = None
# fmt: on

readme_template = """<div dir=rtl>

![غلاف](./غلاف.png)

> ملف بي.دي.إف منسق الشكل (ينصح به): [./تجميعة.pdf](./تجميعة.pdf)
{المحتوى}
"""


if os.path.isfile(CACHE_DIR):
    raise Exception("file exists in the same place of cache dir: " + CACHE_DIR)
if not os.path.isdir(CACHE_DIR):
    os.mkdir(CACHE_DIR)


def get_markdown(block, indent="", indent_unit="  ", root=False):
    content = ""
    block_prefix = "\n\n" + indent

    # collecting the bookmark info as it depends
    # on some types of sibilings blocks
    bookmark = {}
    numlist_counter = 0

    for child in tqdm(block.children) if root else block.children:
        child_type = child.type  # performance considerations

        if bookmark.get("link"):
            if child_type == "quote":
                bookmark["description"] = child.title
                continue
            first_is_latin = re.compile(
                r"^\s*[a-zA-Z]").search(bookmark["description"])
            direction = "ltr" if first_is_latin else "rtl"
            content += f"{block_prefix}- {bookmark['link']}"
            content += f"{block_prefix}  <span dir={direction}>{bookmark['description']}</span>"
            bookmark = {}
            if child_type == "bulleted_list":
                subcontent = get_markdown(child, indent=indent + indent_unit)
                content += subcontent
                continue

        if child_type == "numbered_list":
            numlist_counter += 1
            content += f"\n{numlist_counter}. " + child.title
            continue

        # the next "numbered_list" will be a new list
        numlist_counter = 0

        if child_type == "text":
            content += block_prefix + "" + child.title
        elif child_type == "table_of_contents":
            content += block_prefix + "<!---toc start-->\n<!---toc end-->"
        elif child_type == "divider":
            content += block_prefix + "---"
        elif child_type == "header":
            content += block_prefix + "# " + child.title
        elif child_type == "sub_header":
            content += block_prefix + "## " + child.title
        elif child_type == "sub_sub_header":
            content += block_prefix + "### " + child.title
        elif child_type == "column_list":
            content += ""
        elif child_type == "bulleted_list":
            content += block_prefix + "- " + child.title
        elif child_type == "quote":
            content += block_prefix + "> " + child.title
        elif child_type == "bookmark":
            remove_pattern = re.compile(
                r"\s*Contribute to .*? development by creating an account on GitHub\."
            )
            desc = remove_pattern.sub("", child.description)
            bookmark["link"] = child.link
            bookmark["description"] = desc

    if bookmark.get("link"):
        first_is_latin = re.compile(
            r"^\s*[a-zA-Z]").search(bookmark["description"])
        direction = "ltr" if first_is_latin else "rtl"
        content += f"{block_prefix}- {bookmark['link']}"
        content += (
            f"{block_prefix}  <span dir={direction}>{bookmark['description']}</span>"
        )

    return content


def get_page_data():
    start_time = time.time()
    print("📑 جاري احضار البيانات بواسطة مكتبة notionpy...")
    page_data = get_page_data_notionpy()
    end_time = time.time()
    print("✅️ أُحضرت البيانات خلال: ",
          "{:2.2}".format(end_time - start_time), "ث")

    return page_data


def get_page_data_notionpy():
    global notion_client, page_bock
    notion_client = notion_client or NotionClient(
        token_v2=env["NOTION_COOKIE_TOKEN_V2"]
    )
    page_block = notion_client.get_block(NOTION_PAGE_ID)
    return page_block


if __name__ == "__main__":
    page_data = get_page_data()
    page_md = get_markdown(page_data, root=True)
    readme_content = readme_template.format(المحتوى=page_md)

    with open(README_FILE, "w") as f:
        f.write(readme_content)

    mdtoc_path = os.path.join(__dirname__, "env/bin/mdtoc")
    os.system(f"{mdtoc_path} '{README_FILE}'")
