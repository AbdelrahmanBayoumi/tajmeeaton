#!/usr/bin/env python

import os
import sys
import json
import time
import md_toc
import requests
from tqdm import tqdm
from dotenv import dotenv_values
from datetime import datetime as dt, timedelta

env = dotenv_values(".ÿ®Ÿäÿ¶ÿ©")
NOTION_API_URL = "https://api.notion.com/v1"
NOTION_API_VERSION = "2021-05-13"
NOTION_PAGE_ID = "b077633a505a400484f69948dc039f43"
README_FILE = "README.md"
CACHE_DIR = ".cache"
readme_template = \
    """<div dir=rtl>

# ÿ™ÿ¨ŸÖŸäÿπÿ©

![ÿ∫ŸÑÿßŸÅ](./ÿ∫ŸÑÿßŸÅ.png)

{ŸàÿµŸÅ}

<!--TOC-->
---

{ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ}
"""


def generate_readme():
    description = "## ŸàÿµŸÅ"
    page_data = get_page_data()['results']
    content = "## ŸÖÿ≠ÿ™ŸàŸâ\n\n"
    content += "```json\n" + json.dumps(list(map(lambda x: x['type'], page_data)), indent=2) + "\n```"
    return readme_template.format(ŸàÿµŸÅ=description,
                                  ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ=content)


def get_page_data():
    cache_file = f"{CACHE_DIR}/page_data.json"
    timestamp_file = f"{cache_file}.timestamp"
    is_force = len(sys.argv) > 1 and sys.argv[1] == "--ÿ£ÿ¨ÿ®ÿ±"
    if not is_force and os.path.exists(cache_file):
        if os.path.exists(timestamp_file):
            timestap = open(timestamp_file, "r")
            if dt.now() - dt.strptime(timestap.read(), "%c") < timedelta(minutes=5):
                print("üìë ÿßÿ≠ÿ∂ÿßÿ± ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÖŸÜ ŸÖŸÑŸÅ ÿßŸÑŸÖÿÆÿ≤ŸÜ ÿßŸÑŸÖÿ§ŸÇÿ™")
                timestap.close()
                f = open(f"{cache_file}", "r")
                page_data = json.loads(f.read())
                f.close()
                return page_data
            timestap.close()


    start_time = time.time()
    print("üìë ÿ•ÿ≠ÿ∂ÿßÿ± ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÖŸÜ ÿßŸÑÿÆÿßÿØŸàŸÖ ÿßŸÑÿÆÿßÿµ ÿ®ŸÜŸàÿ¥ŸÜ")
    req_data = requests.get(f"{NOTION_API_URL}/blocks/{NOTION_PAGE_ID}/children", headers={
                            "Authorization": f"Bearer {env['NOTION_TOKEN']}",
                            "Notion-Version": NOTION_API_VERSION})
    req_data = req_data.json()
    end_time = time.time()
    print("‚úÖÔ∏è ÿ™ŸÖ ÿ•ÿ≠ÿ∂ÿßÿ± ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿÆŸÑÿßŸÑ: ", "{:2.2}".format(end_time - start_time), "ÿ´")

    with open(cache_file, "w") as f:
        f.write(json.dumps(req_data))
    with open(timestamp_file, "w") as f:
        f.write(dt.now().strftime("%c"))

    return req_data


if os.path.isfile(CACHE_DIR):
    raise "file exists in the same place of cache dir: " + CACHE_DIR
if not os.path.isdir(CACHE_DIR):
    os.mkdir(CACHE_DIR)


if __name__ == "__main__":
    file_content = generate_readme()

    with open(README_FILE, "w") as f:
        f.write(file_content)

    toc = md_toc.build_toc(README_FILE)
    print("üëáÿ¨ÿØŸàŸÑ ÿßŸÑŸÖÿ≠ÿ™ŸàŸäÿßÿ™")
    print("---------------------")
    print(toc)
    file_content = file_content.replace("<!--TOC-->", toc)

    with open(README_FILE, "w") as f:
        f.write(file_content)
